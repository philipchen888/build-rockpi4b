Build ubuntu-uefi sdcard image for rockpi4b:

-----------------------------------------------------------
Download Ubuntu iso.
-----------------------------------------------------------

cd ~/Downloads
wget https://cdimage.ubuntu.com/jammy/daily-live/20240911/jammy-desktop-arm64.iso

cd ~/build-rockpi4b/ubuntu-uefi
Plugin USB2-SATA-SSD/NVMe-SSD to PC.
sudo ./mksatassd.sh
sudo mkfs.vfat /dev/sda1
sudo mkfs.ext4 /dev/sda2
sudo fdisk -l /dev/sda
Eject USB2-SATA-SSD/NVMe-SSD from PC.

Plugin sdcard to PC.
sudo ./mksdcard.sh
sudo mkfs.vfat /dev/sda1
sudo fdisk -l /dev/sda
sudo mount -t vfat /dev/sda1 /mnt
cd /mnt
sudo 7z x ~/Downloads/jammy-desktop-arm64.iso
cd
sync
sudo umount /mnt
Eject sdcard from PC.

----------------------------------------------------------------------------
Install Ubuntu to USB2-SATA-SSD/NVMe-SSD using jammy-desktop-arm64.iso in sdcard.
----------------------------------------------------------------------------

Plugin sdcard to rockpi4b. 
Plugin USB2-SATA-SSD/NVMe-SSD to rockpi4b. Plugin ethernet cable to rockpi4b. Power on rockpi4b.

Double click Install Ubuntu LTS icon.
Erase disk and install Ubuntu.
Click Install now.
Contine till finished. Restart. Try ubuntu.

sudo lsblk
sudo parted /dev/sda ( print, set 1 boot on, print, quit ) ( /dev/nvme0n1 )
sudo mount /dev/sda2 /mnt                                  ( /dev/nvme0n1p2 )
sudo mount /dev/sda1 /mnt/boot/efi                         ( /dev/nvme0n1p1 )
ll /mnt/boot/efi
sudo mount --bind /proc /mnt/proc
sudo mount --bind /dev /mnt/dev
sudo mount --bind /sys /mnt/sys
sudo mount --bind /dev/pts /mnt/dev/pts
sudo chroot /mnt
grub-install --target=arm64-efi --efi-directory=/boot/efi --bootloader-id=ubuntu
update-grub
exit
sudo umount /mnt/proc
sudo umount /mnt/sys
sudo umount /mnt/dev/pts
sudo umount /mnt/dev
sudo umount /mnt/boot/efi
sudo umount /mnt
sync

sudo mount /dev/sda1 /mnt                                  ( /dev/nvme0n1p1 )
sudo vi /mnt/EFI/ubuntu/grub.cfg ( change first line to search --no-floppy --fs-uuid --set=root --hint='usb0,gpt2' --hint='mmcblk1,gpt2' --hint='nvme0n1,gpt2' UUID )
sync
sudo umount /mnt
sudo e2label /dev/sda2 rootfs                              ( /dev/nvme0n1p2 )
sudo mount /dev/sda2 /mnt                                  ( /dev/nvme0n1p2 )
sudo vi /mnt/boot/grub/grub.cfg ( same change as above to the first menuentry, change linux to root=LABEL=rootfs rw rootwait )
sudo vi /mnt/etc/fstab ( make sure rootfs UUID and esp UUID are correct, change all space to tab, delete swapfile )
sync
sudo umount /mnt
sudo shutdown -h now

Unplug sdcard from rockpi4b.
Plugin USB2-SATA-SSD/NVMe-SSD to rockpi4b. Plugin ethernet cable to rockpi4b. Power on rockpi4b.
Disable power saving and screen saver.

df .
uname -a
lsb_release -a
date
sudo apt-mark hold 6.8.0-40-generic ( or sudo apt-mark hold $(uname -r) )
To unhold: sudo apt-mark unhold 6.8.0-40-generic
sudo apt update
sudo apt upgrade    ( don't restart computer untill after mainline kernel installed )
sync
sudo apt install net-tools openssh-server
sudo ifconfig

Check if Ubuntu is running UEFI mode:
ls /sys/firmware/efi

---------------------------------------------------------------------
Compile and install mainline kernel and install wifi bluetooth driver.
---------------------------------------------------------------------

sudo apt update
sudo apt install flex bison libelf-dev libssl-dev build-essential libncurses-dev git speedtest-cli glmark2-es2 glmark2-es2-wayland mpv ffmpeg python3-pip python3-setuptools pandoc pavucontrol zip rfkill vsftpd

speedtest-cli

Install wifi bluetooth driver:
sudo vi /etc/vsftpd.conf  ( anonymous_enable=NO local_enable=YES write_enable=YES )
sudo systemctl restart vsftpd
Ftp ~/build-rockpi4b/linux/linux/tmp/boot/dtb/rockchip/rk3399-rock-pi-4b.dtb to /etc/flash-kernel/dtbs
Ftp ~/build-rockpi4b/linux/linux/tmp/boot/dtb/rockchip/rk3399-rock-pi-4b.dtb to /etc/flash-kernel/dtbs/rk3399-rock-pi-4a.dtb
Ftp ~/build-rockpi4b/ubuntu-uefi/packages/* to /lib/firmware/brcm

nproc --all
wget https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-6.9-rc5.tar.gz
tar -xzf linux-6.9-rc5.tar.gz
mv linux-6.9-rc5 linux

Set follows in ./linux/arch/arm64/configs/defconfig to enable NVMe:
CONFIG_PHY_ROCKCHIP_PCIE=y
CONFIG_BLK_DEV_NVME=y
CONFIG_PCIE_ROCKCHIP_HOST=y
CONFIG_SATA_AHCI=y
CONFIG_EXT4_FS=y
CONFIG_PCIEPORTBUS=y

cd linux
sudo make mrproper
make ARCH=arm64 defconfig
make ARCH=arm64 all -j6               ( it may take 4 hours to compile kernel )
ll /lib/modules
sudo apt-mark unhold 6.8.0-40-generic
sudo make ARCH=arm64 modules_install
ll /lib/modules
sudo \rm /boot/dtb
sudo make ARCH=arm64 dtbs_install
sudo cp /boot/dtbs/6.9.0-rc5/rockchip/rk3399-rock-pi-4b.dtb /etc/flash-kernel/dtbs
sudo cp /boot/dtbs/6.9.0-rc5/rockchip/rk3399-rock-pi-4b.dtb /etc/flash-kernel/dtbs/rk3399-rock-pi-4a.dtb
sudo make ARCH=arm64 install

sudo blkid /dev/sda2 ( write down UUID for next step )
sudo vi /etc/grub.d/40_custom_uuid ( add
#!/bin/sh
exec tail -n +3 $0

menuentry "Boot from UUID" {
    search --no-floppy --fs-uuid --set=root --hint usb0,gpt2 --hint mmcblk1,gpt2 --hint nvme0n1,gpt2 9c684b63-627e-48f5-94ac-cf2920813dfb
    echo    'Loading Linux 6.9.0-rc5-arm64 ...'
    linux /boot/vmlinuz-6.9.0-rc5 root=LABEL=rootfs rootwait rw
    echo    'Loading initial ramdisk ...'
    initrd /boot/initrd.img-6.9.0-rc5
    echo    'Loading rk3399-rock-pi-4b.dtb'
    devicetree /boot/dtbs/6.9.0-rc5/rockchip/rk3399-rock-pi-4b.dtb
}
)

Note: change the above UUID to real UUID like: b3adbe54-ab88-4da5-a9a6-08cf87a09d69
Find real UUID: sudo blkid /dev/sda2

sudo chmod +x /etc/grub.d/40_custom_uuid
sudo vi /etc/default/grub ( change GRUB_DEFAULT=0 to GRUB_DEFAULT="Boot from UUID" )
sudo update-grub  ( generate grub.cfg )
cd
sync
sudo reboot

sudo nmcli dev wifi connect "SSID" password "PASSWORD"
Disconnect ethernet cable from rockpi4b.
uname -a
Check if Ubuntu is running UEFI mode:
ls /sys/firmware/efi

glmark2-es2
glmark2-es2-wayland
speedtest-cli

aplay -l
pavucontrol  ( select hdmi as default )

git clone https://github.com/yt-dlp/yt-dlp.git
cd yt-dlp
make
cd
~/yt-dlp/yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]' hyUhEjtlDLA -o avemaria.mp4
mpv avemaria.mp4

sudo rfkill list
hciconfig hci0
hcitool dev
hciconfig -a
